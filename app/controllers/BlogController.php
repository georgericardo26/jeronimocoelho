<?php
/**
 * Created by PhpStorm.
 * User: georgericardo
 * Date: 18/06/19
 * Time: 21:13
 */

use ControllerBase\ControllerBase;
use Phalcon\Mvc\View;
use Phalcon\Paginator\Factory;
use Phalcon\Paginator\Adapter\Model as PaginatorModel;


class BlogController extends ControllerBase
{
    private $paginator;
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->view->setVar("admin_user", $this->session->get('admin'));

    }

    public function indexAction()
    {
        $this->dispatcher->forward(
            [
                'controller' => 'blog',
                'action'     => 'show'
            ]
        );
    }

    public function showAction($current_page = null)
    {
        $this->view->setRenderLevel(View::LEVEL_LAYOUT);
        $this->view->setLayout("/blog/blog-pagination");
        $blog = $this->modelsManager->createBuilder()
            ->columns('*')
            ->from('Blog')
            ->join('Galeria')
            ->orderBy('-Blog.id')
            ->getQuery()
            ->execute();

        $paginator = new PaginatorModel(
            [
                'data'  => $blog,
                'limit' => 10,
                'page'  => ($current_page == null) ? 1 : $current_page,
            ]
        );

        $page = $paginator->getPaginate();
        $this->view->setVar("blog", $page);

    }

    public function pageAction($current_page = null){

        $this->view->setRenderLevel(View::LEVEL_LAYOUT);
        $this->view->setLayout("/blog/blog-pagination");
        $blog = $this->modelsManager->createBuilder()
            ->columns('*')
            ->from('Blog')
            ->join('Galeria')
            ->orderBy('-Blog.id')
            ->getQuery()
            ->execute();

        $paginator = new PaginatorModel(
            [
                'data'  => $blog,
                'limit' => 10,
                'page'  => ($current_page == null) ? 1 : $current_page,
            ]
        );

        $page = $paginator->getPaginate();
        $this->view->setVar("blog", $page);

    }

    public function likeAction()
    {


    }

    public function postAction($id)
    {

        $this->view->setRenderLevel(View::LEVEL_LAYOUT);
        $this->view->setLayout("/blog/post/post-show");
        $post = $this->modelsManager->createBuilder()
            ->columns('*')
            ->from('Blog')
            ->join('Galeria')
            ->where("Blog.id = {$id}")
            ->getQuery()
            ->execute();

        $last =  Blog::find([
            "columns" => "id"
        ])->getLast();

        $first = Blog::find([
            "columns" => "id"
        ])->getFirst();

        $post_id = (int)$post[0]->blog->id;
        $last = (int)$last->id;
        $first = (int)$first->id;
        $next = ($post_id >= $last) ? $first : ($post_id + 1);
        $previous = ($post_id <= $first) ? $first : ($post_id - 1);

        $this->view->setVars(["post" => $post,
                            "next" => $next,
                            "previous" => $previous]);

    }

    public function postpageAction($post_id = null)
    {

       $this->view->setRenderLevel(View::LEVEL_LAYOUT);
       $this->view->setLayout("/blog/post/post-show");

       //$max = $this->modelsManager->createQuery("SELECT COUNT ('id') FROM Blog)");
       $post = $this->modelsManager->createBuilder()
            ->columns('*')
            ->from('Blog')
            ->join('Galeria')
            ->where("Blog.id = {$post_id}")
            ->getQuery()
            ->execute();

       $last =  Blog::find([
            "columns" => "id"
       ])->getLast();

       $first = Blog::find([
            "columns" => "id"
       ])->getFirst();

        $post_id = (int)$post[0]->blog->id;
        $last = (int)$last->id;
        $first = (int)$first->id;
        $next = ($post_id >= $last) ? $first : ($post_id + 1);
        $previous = ($post_id <= $first) ? $first : ($post_id - 1);

        $this->view->setVars(["post" => $post,
            "next" => $next,
            "previous" => $previous]);

    }

    public function searchAction()
    {

    }

}